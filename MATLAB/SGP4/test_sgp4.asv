%%%%%%%% Open Source Code with alterations. 
% This is an open source file from https://au.mathworks.com/matlabcentral/fileexchange/62013-sgp4?s_tid=mwa_osa_a
% alterations have been made to this code and are indicated by a %%%%%% 
% additional features added are the abilitly to retrive TLEs from NORAD and
% fixed the error when eccentricity was zero 
% open source functions required (same source) are actan.m,
% Convert_Sat_State.m, fmod2.m, modulus.m,sgp4.m. 
% Our own functions required are get_tle.m, isolatetle.m, epochyear.m,
% secder.m


clc
clear
format long g

ge = 398600.8; % Earth gravitational constant
TWOPI = 2*pi;
MINUTES_PER_DAY = 1440.;
MINUTES_PER_DAY_SQUARED = (MINUTES_PER_DAY * MINUTES_PER_DAY);
MINUTES_PER_DAY_CUBED = (MINUTES_PER_DAY * MINUTES_PER_DAY_SQUARED);

%% New Code, the opensource code used a TLE.txt file to extract data. The new code retrieves a TLE from NORAD 
%%%%%%%%%%% Retrieving the file from the website using get_tle function, this is an alteration from the open source  
% norad=input('Enter the NORAD ID numbser, 25544 for ISS : ','s'); % user input for the NORAD ID
% username = input('Enter Your Spacetrack Username/Email: ','s'); %user input for the space-track username
% password = input('Enter Your Spacetrack Password: ','s'); % user input for the password 
% count = input('How many TLEs do you want? Type 1 for most recent 2 for 2 most recent etc, 0 for between 2 dates: '); % user input number of TLEs required
% dateStart=input('Put in the start date or 0. format: yyyy-mm-dd : ','s'); %  user input for the start date of the TLEs 
% if strcmp(dateStart,'0') % checking if the dateStart value is zero, ie set number of most recent TLEs was selected 
%     dateStart =0;
% end 
% dateEnd=input('Put in the end date or 0. format: yyyy-mm-dd : ','s'); % repeat for date end 
% if strcmp(dateEnd,'0')
%     dateEnd =0;
% end 
norad='25544';
username='arajendran@swin.edu.au';
password='Michellehouston89!';
count=0;
dateStart='2019-07-04';
dateEnd = '2019-07-05';
tleData = get_tle(norad, username,password,count,dateStart,dateEnd); % calling the tledata using the function get_tle
%% TLE First Line DATA  %%%%%%%%% Here we extract the first line data using the variable names of the open source code
for increment=1:2:length(tleData)-1
    tleFirstline{increment/2+1/2}=tleData{increment}; % finding every second line of the tle data 
end
Cnum = isolatetle(3,7,tleFirstline); % catalog number (NORAD)
SC = isolatetle(8,8,tleFirstline); % security classification 
ID = isolatetle(10,17,tleFirstline); % identification number 
epoch = isolatetle(19,32,tleFirstline); % epoch
TD1 =isolatetle(34,43,tleFirstline); % first time derivative 
[TD2,ExTD2] = secder(tleFirstline); % second time derivative 
BStar = isolatetle(54,59,tleFirstline); % Bstar/drag Term
ExBStar = isolatetle(60,61,tleFirstline); % exponent of BStar /drag ter 
for increment = 1:1:length(tleFirstline) %%%%%%%% for loop for multiple TLEs 
BStar(increment) = BStar(increment) *1e-5*10^ExBStar(increment); 
end
Etype = isolatetle(63,63,tleFirstline); % ephemeris type 
Enum = isolatetle(65,70,tleFirstline);% element number 

%% TLE second Line DATA %%%%%%%%% Extracting the second line data with variable names for the opensource code
for increment=2:2:length(tleData)
    tleSecondline{increment/2}=tleData{increment}; %%%%%%% finding every second line of the tle data 
end

%%%%%%%% Converting the data to the variable names provided by the open
%%%%%%%% source code using our own function isolatetle.m.
i=isolatetle(9,16,tleSecondline); % orbit inclination (degrees)
raan = isolatetle(18,25,tleSecondline); % right asscension of ascending node (degrees)
e = isolatetle(27,33,tleSecondline); % eccentricity, decimal point assumed 
omega = isolatetle(35,42,tleSecondline); % argument of perigee (degrees) 
M = isolatetle(44,51,tleSecondline); % mean anomaly (degrees) 
no = isolatetle(53,63,tleSecondline);
for increment=1:1:length(tleFirstline) %%%%%%% for loop for multiple TLEs 
a = (ge/(no(increment)*2*pi/86400)^2)^(1/3); %%%semi major axis (m), this line is from the open source code
end
rNo = isolatetle(64,68,tleSecondline); % revolution number at epoch 


%% 
%%%%%%%%%%%%%%This section of code is from the open source code and was
%%%%%%%%%%%%%%used to isolate the data from a TLE.txt file, this has been
%%%%%%%%%%%%%%removed as it is only useful for a single text file. 
% Open the TLE file and read TLE elements


% 19-32	04236.56031392	Element Set Epoch (UTC)
% 3-7	25544	Satellite Catalog Number
% 9-16	51.6335	Orbit Inclination (degrees)
% 18-25	344.7760	Right Ascension of Ascending Node (degrees)
% 27-33	0007976	Eccentricity (decimal point assumed)
% 35-42	126.2523	Argument of Perigee (degrees)
% 44-51	325.9359	Mean Anomaly (degrees)
% 53-63	15.70406856	Mean Motion (revolutions/day)
% 64-68	32890	Revolution Number at Epoch

% while (1)
%     % read first line
%     tline = fgetl(fid);
%     if ~ischar(tline)
%         break
%     end
%     Cnum = tline(3:7);      			        % Catalog Number (NORAD)
%     SC   = tline(8);					        % Security Classification
%     ID   = tline(10:17);			            % Identification Number
%     epoch =tline(19:32);              % Epoch
%     TD1   = str2num(tline(34:43));              % first time derivative
%     TD2   = str2num(tline(45:50));              % 2nd Time Derivative
%     ExTD2 = tline(51:52);                       % Exponent of 2nd Time Derivative
%     BStar = str2num(tline(54:59));              % Bstar/drag Term
%     ExBStar = str2num(tline(60:61));            % Exponent of Bstar/drag Term
%     BStar = BStar*1e-5*10^ExBStar;
%     Etype = tline(63);                          % Ephemeris Type
%     Enum  = str2num(tline(65:end));             % Element Number
%     
%     % read second line
%     tline = fgetl(fid);
%     if ~ischar(tline)
%         break
%     end
%     i = str2num(tline(9:16));                   % Orbit Inclination (degrees)
%     raan = str2num(tline(18:25));               % Right Ascension of Ascending Node (degrees)
%     e = str2num(strcat('0.',tline(27:33)));     % Eccentricity
%     omega = str2num(tline(35:42));              % Argument of Perigee (degrees)
%     M = str2num(tline(44:51));                  % Mean Anomaly (degrees)
%     no = str2num(tline(53:63));                 % Mean Motion
%     a = ( ge/(no*2*pi/86400)^2 )^(1/3);         % semi major axis (m)
%     rNo = str2num(tline(64:68));                % Revolution Number at Epoch
% end
% fclose(fid);

%% 
pos = zeros(length(tleFirstline),3);
vel = zeros(length(tleFirstline),3);

tsince = zeros(length(tleFirstline),1);
for increment = 1:1:length(tleFirstline) %%%%%%%%%% A for loop to allow multiple TLE's to pass through 
satdata.epoch = epoch(increment);
satdata.norad_number = {Cnum};
satdata.bulletin_number = {ID};
satdata.classification = {SC}; % almost always 'U'
satdata.revolution_number = rNo(increment);
satdata.ephemeris_type = {Etype};
satdata.xmo = M(increment) * (pi/180);
satdata.xnodeo = raan(increment) * (pi/180);
satdata.omegao = omega(increment) * (pi/180);
satdata.xincl = i(increment) * (pi/180);
satdata.eo= e(increment);
satdata.xno = no(increment) * TWOPI / MINUTES_PER_DAY;
satdata.xndt2o = TD1(increment) * 1e-8 * TWOPI / MINUTES_PER_DAY_SQUARED;
satdata.xndd6o = TD2(increment) * TWOPI / MINUTES_PER_DAY_CUBED;
satdata.bstar = BStar(increment);

[tsince(increment),epochDate(increment)] = epochyear(epoch(increment));


[pos(increment,:), vel(increment,:)] = sgp4(tsince(increment), satdata);
fprintf('     TSINCE              X                Y                Z     [km]\n');
fprintf(' %9.1f%22.8f%18.8f%18.8f \n',tsince(increment),pos(increment,1),pos(increment,2),pos(increment,3));
fprintf('                       XDOT             YDOT             ZDOT    [km/s]\n');
fprintf('  %28.8f%18.8f%18.8f \n\n',vel(increment,1),vel(increment,2),vel(increment,3));

[posEcef(increment,1),posEcef(increment,2),posEcef(increment,3)] = teme2ecef(pos(increment,1)*1000,pos(increment,2)*1000,pos(increment,3)*1000,epochDate(increment),minutes(tsince(increment)));
end
posLLA=ecef2lla(posEcef);

T = table(tsince, pos, vel, 'VariableNames',{'tsince','Position','Velocity'}) ;
T2 = table(tsince,posLLA(:,1),posLLA(:,2),posLLA(:,3),'VariableNames',{'tsince','Latitude','Longtitude','Altitude'});
figure(1)
% geoscatter(posLLA(1), posLLA(2));
T2.Altitude = T2.Altitude/1000;
[theta,coverage] = coverage_calculation(T2.Latitude,T2.Altitude);
figure
geoscatter(T2.Latitude,T2.Longtitude,'^')
geobasemap colorterrain
hold on
for increment =1:1:length(tleFirstline)
   circle_plot(T2.Latitude(increment),T2.Longtitude(increment),T2.Altitude(increment),coverage(increment));
end
% for increment =1:1:length(theta)
% footLat1(increment)=T2.Latitude(increment)-theta(increment);
% footLat2(increment)=T2.Latitude(increment)+theta(increment);
% if footLat1(increment)>=90 
%     footLat1(increment)=footLat1(increment)-180;
% end
% if footLat1(increment)<=-90
%     footLat1(increment)=footLat1(increment)+180;
% end
% if footLat2(increment)>=90
%     footLat2(increment)=footLat2(increment)-180;
% end
% if footLat2(increment)<=-90
%         footLat2(increment)=footLat2(increment)+180;
% end
% footLon1(increment)=T2.Longtitude(increment)-theta(increment);
% footLon2(increment)=T2.Longtitude(increment)+theta(increment);
% if footLon1(increment)>=90 
%     footLon1(increment)=footLon1(increment)-180;
% end
% if footLon1(increment)<=-90
%     footLon1(increment)=footLon1(increment)+180;
% end
% if footLon2(increment)>=90
%     footLon2(increment)=footLon2(increment)-180;
% end
% if footLat2(increment)<=-90
%         footLon2(increment)=footLon2(increment)+180;
% end
% end
% T3=table(tsince,T2.Longtitude,T2.Latitude,footLat1',footLat2',footLon1',footLon2','VariableNames',{'tsince','Latitude','Longtitude','footLat1','footLat2','footLon1','footLon2'});
% geoscatter(T3.footLat1,T2.Longtitude,'x','g')
% geoscatter(T3.footLat2,T2.Longtitude,'x','g')
% geoscatter(T2.Latitude,T3.footLon1,'x','g')
% geoscatter(T2.Latitude,T3.footLon2,'x','g')

hold off 